<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZzzzzのBlog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-09T14:00:39.646Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web1</title>
    <link href="http://example.com/2021/11/09/web1/"/>
    <id>http://example.com/2021/11/09/web1/</id>
    <published>2021-11-09T13:54:11.000Z</published>
    <updated>2021-11-09T14:00:39.646Z</updated>
    
    <content type="html"><![CDATA[<p>初入WEB<br>了解到了两种请求http方式<br>1、get<br>2、post<br>两者的区别为<br>1、GET在浏览器回退时是无害的，而POST会再次提交请求。<br>2、GET产生的URL地址可以被Bookmark，而POST不可以。<br>3、GET请求会被浏览器主动cache，而POST不会，除非手动设置。<br>4、GET请求只能进行url编码，而POST支持多种编码方式。<br>5、GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。<br>6、GET请求在URL中传送的参数是有长度限制的，而POST么有。<br>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。<br>7、GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。<br>8、GET参数通过URL传递，POST放在Request body中。</p><p>and DOS命令<br>1、用*可以代替0或多个字符<br>2、用？可以代替一个字符<br>查看命令<br>1、cd 进入文件夹<br>2、dir 显示目录下的目录和文件<br>3、more 查看文件内容<br>4、type 查看文件内容<br>操作命令<br>1、md 创建文件夹<br>2、rd 删除空文件夹<br>3、copy 复制<br>4、del 删除<br>5、ren 重命名文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;初入WEB&lt;br&gt;了解到了两种请求http方式&lt;br&gt;1、get&lt;br&gt;2、post&lt;br&gt;两者的区别为&lt;br&gt;1、GET在浏览器回退时是无害的，而POST会再次提交请求。&lt;br&gt;2、GET产生的URL地址可以被Bookmark，而POST不可以。&lt;br&gt;3、GET请求会被</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C tx</title>
    <link href="http://example.com/2021/10/23/C-tx/"/>
    <id>http://example.com/2021/10/23/C-tx/</id>
    <published>2021-10-23T14:43:42.000Z</published>
    <updated>2021-10-23T15:40:08.047Z</updated>
    
    <content type="html"><![CDATA[<p>在C语言设计基础的习题中，<br>编程实现输入一个无符号整数，分别输出其低四位和高四位。<br>这个题目用到了按位运算。<br>运算符 含义 描述<br>&amp; 按位与 如果两个相应的二进制位都为1，则该位的结果值为1，否则为0。<br>| 按位或 两个相应的二进制位中只要有一个为1，该位的结果值为1。<br>^ 按位异或 若参加运算的两个二进制位值相同则为0，否则为1。<br>还有&lt;&lt;和&gt;&gt;。<br>在这个题目中，我学到了&amp;符号的运用，也明白了按位运算中&amp;和|的区别，其中&amp;的用法是取二进制中我所要的<br>位置，而|则是给我要取1的位置赋值，再者我也学到了移位&lt;&lt;和&gt;&gt;的运用，题目中的第四位，我用的是int字符<br>类型，所以我用&amp;0xff的方法来取值，高四位直接用的移位，最终我的代码是这样的。<br>#include &lt;stdio.h&gt;</p><p>int main()</p><p>{</p><p>unsigned int a;</p><p>scanf(“%d”,&amp;a);</p><p>Printf (“the top four digits are% u \ \ n”, a &gt; &gt; 28);</p><p>Printf (“the lower four digits are% u \ \ n”, a&amp;0xff);</p><p>return 0;</p><p>}<br>我认为这就是唯一的解法了，但是老师的讲评让我学到了一个新的思路。<br>在取低四位时还是用移位的方法，直接用（a&lt;&lt;28）&gt;&gt;28，这是我没有想到的，这确实让我更深刻理解了移位的<br>作用。<br>而在学按位运算时，还有一个符号^，这个符号用来对指定位置的翻转，我觉得这个可以用来取一个无符号数的<br>指定位置的反码，现在的学习和题目中暂时还用不到这个符号，后期希望能更多用到|和^符号。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在C语言设计基础的习题中，&lt;br&gt;编程实现输入一个无符号整数，分别输出其低四位和高四位。&lt;br&gt;这个题目用到了按位运算。&lt;br&gt;运算符 含义 描述&lt;br&gt;&amp;amp; 按位与 如果两个相应的二进制位都为1，则该位的结果值为1，否则为0。&lt;br&gt;| 按位或 两个相应的二进制位中</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/09/19/hello-world/"/>
    <id>http://example.com/2021/09/19/hello-world/</id>
    <published>2021-09-19T02:43:11.922Z</published>
    <updated>2021-09-19T02:43:11.922Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
